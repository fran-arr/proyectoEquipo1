# Importamos las librer√≠as
import psutil
import platform
import os
import json
from datetime import datetime

# En esta parte se crea un diccionario donde se almacenar√°n los datos con sus respectivas claves-valores
def obtener_datos():
    datos = {}

    # Bloque de obtenci√≥n del estado de la bater√≠a
    try:
        bateria = psutil.sensors_battery()
        if bateria:
            datos["bateria"] = bateria.percent       
            datos["cargando"] = bateria.power_plugged
        else:
            datos["bateria"] = None
            datos["cargando"] = None
    except:
        datos["bateria"] = None
        datos["cargando"] = None

    # Obtenci√≥n de la memoria RAM
    mem = psutil.virtual_memory()
    datos["ram"] = mem.percent   

    # Obtenci√≥n del disco (unidad C:\ en nuestro dispositivo Windows)
    disco = psutil.disk_usage('C:\\')
    datos["disco"] = disco.percent   

    # Obtenci√≥n de la red (hacemos ping a Google para probar conectividad)
    response = os.system("ping -n 1 google.com >nul 2>&1")
    datos["red"] = "Conectado" if response == 0 else "Sin conexi√≥n"

    # Obtenci√≥n del sistema operativo y su versi√≥n
    datos["sistema"] = platform.system() + " " + platform.release()

    return datos

# Llamamos m√©todo obtener_datos() y guardamos su resultado
def diagnosticar_pc():
    datos = obtener_datos()
    diagnostico = []

    # Reglas IF‚ÄìTHEN
    if datos["bateria"] is not None:
        if datos["bateria"] < 10 and not datos["cargando"]:
            diagnostico.append("‚ö†Ô∏è Posible problema de bater√≠a: carga muy baja y no conectado al cargador.")
        elif datos["bateria"] == 100 and datos["cargando"]:
            diagnostico.append("‚ÑπÔ∏è La bater√≠a est√° totalmente cargada y conectada al cargador.")

    if datos["ram"] > 90:
        diagnostico.append("‚ö†Ô∏è La memoria RAM est√° muy saturada, posible problema de rendimiento.")

    if datos["disco"] > 90:
        diagnostico.append("‚ö†Ô∏è El disco est√° casi lleno, puede causar lentitud.")

    if datos["red"] == "Sin conexi√≥n":
        diagnostico.append("‚ö†Ô∏è No hay conexi√≥n a internet. Revisa el adaptador de red o la configuraci√≥n.")

    if not diagnostico:
        diagnostico.append("‚úÖ No se detectaron fallas graves en el sistema.")

    # Guardar en JSON
    guardar_json(datos, diagnostico)

    return datos, diagnostico

# Funci√≥n para guardar los resultados en un archivo JSON
def guardar_json(datos, diagnostico):
    registro = {
        "fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "datos": datos,
        "diagnostico": diagnostico
    }

    # Nombre del archivo
    archivo = "diagnostico_pc.json"

    # Si el archivo ya existe, cargamos los datos previos y a√±adimos el nuevo
    try:
        with open(archivo, "r", encoding="utf-8") as f:
            historial = json.load(f)
    except FileNotFoundError:
        historial = []

    historial.append(registro)

    # Guardamos de nuevo el historial completo
    with open(archivo, "w", encoding="utf-8") as f:
        json.dump(historial, f, indent=4, ensure_ascii=False)

# Ejecuci√≥n principal
if __name__ == "__main__":
    datos, resultado = diagnosticar_pc()

    print("\nüìä RESULTADO DEL DIAGN√ìSTICO")
    print("-"*50)
    print(f"Sistema operativo: {datos['sistema']}")
    print(f"RAM utilizada     : {datos['ram']}%")
    print(f"Disco utilizado   : {datos['disco']}%")
    print(f"Estado red        : {datos['red']}")
    if datos['bateria'] is not None:
        print(f"Bater√≠a           : {datos['bateria']}% (Cargando: {datos['cargando']})")
    else:
        print("Bater√≠a           : No disponible")

    print("\nüîé Diagn√≥stico:")
    for r in resultado:
        print(" -", r)

    print("\n‚úÖ Los resultados fueron guardados en 'diagnostico_pc.json'")

